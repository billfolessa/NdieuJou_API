name: Deploy to AWS ECS

on:
  push:
    branches:
      - main  # Déclenche l'action quand du code est poussé sur la branche main
    paths:
      - 'ApiGetway/**'
      - 'EurekaServer/**'
      - 'SecurityAndMemberMgr/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ApiGetway, EurekaServer, SecurityAndMemberMgr]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and push Docker image
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SERVICE: ${{ matrix.service }}
        run: |
          cd $SERVICE
          docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/ndieujou/$SERVICE:latest .
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/ndieujou/$SERVICE:latest

      - name: Update ECS Service
        env:
          SERVICE: ${{ matrix.service }}
        run: |
          aws ecs update-service --cluster ndieuJou-cluster --service ndieuJou-$SERVICE --force-new-deployment







name: Deploy to AWS ECS

on:
  push:
    branches:
      - main  # Déclenche l'action quand du code est poussé sur la branche main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

      - name: Build and push Docker images for all microservices
        run: |
          # Liste des microservices
          SERVICES=("EurekaServer" "ApiGetway" "SecurityAndMemberMgr")

          for SERVICE in "${SERVICES[@]}"; do
            echo "Building and pushing $SERVICE..."
            
            # Aller dans le dossier du microservice
            cd $SERVICE
            
            # Construire l'image Docker
            docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:$SERVICE-latest .
            
            # Tagger l'image
            docker tag ${{ secrets.ECR_REPOSITORY_URI }}:$SERVICE-latest ${{ secrets.ECR_REPOSITORY_URI }}:$SERVICE-latest
            
            # Pusher l'image dans ECR
            docker push ${{ secrets.ECR_REPOSITORY_URI }}:$SERVICE-latest
            
            # Revenir au répertoire racine
            cd ..
          done

      - name: Update ECS Services
        run: |
          # Mettre à jour chaque service ECS avec la nouvelle image
          SERVICES=("EurekaServer" "ApiGetway" "SecurityAndMemberMgr")

          for SERVICE in "${SERVICES[@]}"; do
            echo "Updating ECS service for $SERVICE..."
            aws ecs update-service --cluster ndieuJou-cluster --service $SERVICE --force-new-deployment
          done
